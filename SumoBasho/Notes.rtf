{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 // Un-used code\
\
// Geometry methods\cf0 \
\cf2 //static inline CGFloat distanceBetweenPoints(CGPoint first, CGPoint second) \{\cf0 \
\cf2 //    return hypotf(second.x - first.x, second.y - first.y);\cf0 \
\cf2 //\}\cf0 \
\cf2 //\cf0 \
\cf2 //\cf0 \
\cf2 //static inline CGFloat vectorToRadians(CGVector vector) \{\cf0 \
\cf2 //    return atan2(vector.dy, vector.dx);\cf0 \
\cf2 //\}\cf0 \
\cf2 //\cf0 \
\cf2 //static inline CGVector radiansToVector(CGFloat radians) \{\cf0 \
\cf2 //    CGVector vector;\cf0 \
\cf2 //    vector.dx = cosf(radians);\cf0 \
\cf2 //    vector.dy = sinf(radians);\cf0 \
\cf2 //    return vector;\cf0 \
\cf2 //\}\
\
// Get left and right corners of opponent in scene coordinates\cf0 \
\cf2 // CGPoint opponentLeftFront = [_opponent convertPoint:CGPointMake(0, -_opponent.size.width/2) toNode:self];\cf0 \
\cf2 // CGPoint opponentRightFront = [_opponent convertPoint:CGPointMake(0, _opponent.size.width/2) toNode:self];\cf0 \
    \
\cf2 // Distance to opponents left and right corners\cf0 \
\cf2 // CGFloat distanceToOpponentLeftFront = distanceBetweenPoints(_hero.anchorPoint, opponentLeftFront);\cf0 \
\cf2 // CGFloat distanceToOpponentRightFront = distanceBetweenPoints(_hero.anchorPoint, opponentRightFront);\cf0 \
    \
\cf2 // Angle facing opponent using law of cosines here since all sides are known, but interior angles are unknown\cf0 \
\cf2 // CGFloat a = distanceToOpponentLeftFront;\cf0 \
\cf2 // CGFloat b = distanceToOpponentRightFront;\cf0 \
\cf2 // CGFloat c = _opponent.size.width;\cf0 \
\cf2 // CGFloat thetaFacingOpponent = acosf((c * c - a * a - b * b ) / ( -2 * a * b));\cf0 \
    \
\cf2 // Vector to left corner of opponent\cf0 \
\cf2 // CGFloat angleToOpponentLF = vectorToRadians(CGVectorMake(opponentLeftFront.x - _hero.position.x,\cf0 \
\cf2 //                                                       opponentRightFront.y - _hero.position.y));\cf0 \
    \
\cf2 // Charge angle scaled about touch along the x-scale of view\cf0 \
\cf2 // CGFloat chargeAngle = angleToOpponentLF + thetaFacingOpponent * _xTouchScalar;\cf0 \
    \
\cf2 // SKSpriteNode *marker = [SKSpriteNode spriteNodeWithColor:[UIColor whiteColor] size:CGSizeMake(5, 5)];\cf0 \
\cf2 // marker.position = opponentRightFront;\cf0 \
\cf2 // self addChild:marker];\cf0 \
}